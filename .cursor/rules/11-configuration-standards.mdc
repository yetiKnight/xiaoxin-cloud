---
description: "Configuration file development standards"
globs: "*.yml,*.yaml,*.properties"
priority: 1000
type: "Always Apply"
---

# 配置文件开发规范

## 核心原则
**配置文件中严禁出现任何中文字符，包括注释、配置值、注释说明等**

## 文件格式规范

### 1. 统一使用YAML格式
- **主配置**: 使用 `.yml` 扩展名
- **国际化**: 使用 `.properties` 文件
- **编码**: 统一UTF-8编码

### 2. 命名规范
```
{service-name}-{profile}.yml
例如：
- iam-gateway-dev.yml
- iam-auth-service-prod.yml
- iam-core-service-test.yml
```

## 内容规范要求

### 1. 语言要求
```yaml
# ✅ 正确：全英文配置
spring:
  application:
    name: iam-gateway-service
  datasource:
    url: jdbc:mysql://localhost:3306/iam_gateway
    username: root
    driver-class-name: com.mysql.cj.jdbc.Driver

# ❌ 错误：包含中文（严禁）
# spring:
#   application:
#     name: IAM网关服务  # 禁止！
#   datasource:
#     url: jdbc:mysql://localhost:3306/iam_gateway  # 数据库配置  # 禁止中文注释！
```

### 2. 注释规范
```yaml
# ✅ 正确：英文注释
# Database configuration for IAM Gateway
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/iam_gateway
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}

# ❌ 错误：中文注释（严禁）
# # 数据库配置  # 禁止！
# spring:
#   datasource:
#     url: jdbc:mysql://localhost:3306/iam_gateway
```

### 3. 配置值规范
```yaml
# ✅ 正确：英文配置值
notification:
  sms:
    sign-name: xiaoxin-cloud
    template-code: LOGIN_VERIFICATION
    provider: aliyun-sms

# ❌ 错误：中文配置值（严禁）
# notification:
#   sms:
#     sign-name: 小信云  # 禁止！
#     template-name: 登录验证  # 禁止！
```

## 国际化处理

### 1. 分离显示文本
```yaml
# application.yml - 配置使用key
notification:
  sms:
    sign-name-key: sms.sign.name
    template-key: sms.template.login

# messages.properties - 国际化文件
sms.sign.name=小信云
sms.template.login=登录验证码
```

### 2. 环境变量支持
```yaml
# 使用环境变量提供中文值
notification:
  sms:
    sign-name: ${SMS_SIGN_NAME:xiaoxin-cloud}
    template-code: ${SMS_TEMPLATE:LOGIN_CODE}
```

## 敏感信息处理

### 1. 环境变量
```yaml
# ✅ 正确：使用环境变量
spring:
  datasource:
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:}
    url: ${DB_URL:jdbc:mysql://localhost:3306/iam_core}

redis:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  password: ${REDIS_PASSWORD:}
```

### 2. 配置中心
```yaml
# 从Nacos等配置中心获取敏感配置
spring:
  cloud:
    nacos:
      config:
        server-addr: ${NACOS_SERVER:localhost:8848}
        username: ${NACOS_USERNAME:nacos}
        password: ${NACOS_PASSWORD:nacos}
```

## 配置分层结构

### 1. 基础配置
```yaml
# 应用基础信息
spring:
  application:
    name: iam-gateway-service
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
```

### 2. 功能配置
```yaml
# 功能模块配置
iam:
  security:
    jwt:
      secret: ${JWT_SECRET:xiaoxin-iam-jwt-secret}
      expiration: ${JWT_EXPIRATION:7200}
    cors:
      enabled: true
      allowed-origins: ${CORS_ORIGINS:http://localhost:3000}
```

### 3. 中间件配置
```yaml
# 中间件配置
spring:
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_DISCOVERY_SERVER:localhost:8848}
    sentinel:
      transport:
        dashboard: ${SENTINEL_DASHBOARD:localhost:8080}
```

## 配置验证规则

### 1. 提交前检查
- 使用正则表达式检查：`[\u4e00-\u9fa5]`
- 确保无中文字符存在

### 2. CI/CD集成
```bash
# 配置文件中文检查脚本
#!/bin/bash
echo "Checking for Chinese characters in config files..."
if grep -r "[\u4e00-\u9fa5]" --include="*.yml" --include="*.yaml" --include="*.properties" .; then
    echo "❌ Chinese characters found in config files!"
    exit 1
else
    echo "✅ No Chinese characters found in config files."
fi
```

### 3. IDE配置
- 配置编辑器检查规则
- 使用插件自动检测中文字符

## 常见错误示例

### ❌ 错误示例
```yaml
# 包含中文注释和配置值
spring:
  application:
    name: IAM认证服务  # 应用名称
  datasource:
    # 数据库连接配置
    url: jdbc:mysql://localhost:3306/iam_auth
    username: 用户名  # 错误！
    
notification:
  sms:
    sign-name: 小信云  # 错误！
    template: 您的验证码是{code}  # 错误！
```

### ✅ 正确示例
```yaml
# All English configuration
spring:
  application:
    name: iam-auth-service
  datasource:
    # Database connection configuration
    url: jdbc:mysql://localhost:3306/iam_auth
    username: ${DB_USERNAME:root}
    
notification:
  sms:
    sign-name: ${SMS_SIGN_NAME:xiaoxin-cloud}
    template-code: ${SMS_TEMPLATE_CODE:LOGIN_VERIFICATION}
```

## 最佳实践

### 1. 配置模板化
- 为每个服务创建配置模板
- 使用占位符替换具体值

### 2. 环境隔离
- dev/test/prod环境配置分离
- 敏感配置使用不同的管理方式

### 3. 配置文档化
- 为每个配置项提供英文说明
- 维护配置变更记录

### 4. 工具辅助
- 使用配置验证工具
- 集成到开发流程中

## 违规处理
- 发现中文配置必须立即修正
- 代码审查时重点检查配置文件
- CI/CD流程阻断包含中文的提交