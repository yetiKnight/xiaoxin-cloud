---
globs: **/controller/**/*.java,**/dto/**/*.java,**/vo/**/*.java
---

# API设计与开发规范

## RESTful API设计原则

### 1. URL设计规范
```
# 资源命名使用复数名词
GET    /api/v1/users          # 获取用户列表
GET    /api/v1/users/{id}     # 获取指定用户
POST   /api/v1/users          # 创建用户
PUT    /api/v1/users/{id}     # 更新用户
DELETE /api/v1/users/{id}     # 删除用户

# 嵌套资源
GET    /api/v1/users/{id}/roles     # 获取用户角色列表
POST   /api/v1/users/{id}/roles     # 为用户分配角色
```

### 2. HTTP状态码使用
- `200 OK`: 请求成功
- `201 Created`: 资源创建成功
- `400 Bad Request`: 请求参数错误
- `401 Unauthorized`: 未认证
- `403 Forbidden`: 无权限访问
- `404 Not Found`: 资源不存在
- `500 Internal Server Error`: 服务器内部错误

## 统一响应格式

### 1. 响应结果封装
使用统一的Result类封装响应：

```java
@Data
@ApiModel("统一响应结果")
public class Result<T> implements Serializable {
    
    @ApiModelProperty("响应码")
    private Integer code;
    
    @ApiModelProperty("响应消息")
    private String message;
    
    @ApiModelProperty("响应数据")
    private T data;
    
    @ApiModelProperty("时间戳")
    private Long timestamp;
    
    // 成功响应
    public static <T> Result<T> success(T data) {
        return new Result<>(ResultCode.SUCCESS.getCode(), 
                           ResultCode.SUCCESS.getMessage(), data);
    }
    
    // 失败响应
    public static <T> Result<T> error(IResult result) {
        return new Result<>(result.getCode(), result.getMessage(), null);
    }
}
```

### 2. 分页响应封装
```java
@Data
@ApiModel("分页响应结果")
public class PageResult<T> implements Serializable {
    
    @ApiModelProperty("当前页码")
    private Long current;
    
    @ApiModelProperty("每页大小")
    private Long size;
    
    @ApiModelProperty("总记录数")
    private Long total;
    
    @ApiModelProperty("总页数")
    private Long pages;
    
    @ApiModelProperty("数据列表")
    private List<T> records;
}
```

## Controller层开发规范

### 1. Controller基础结构
```java
@RestController
@RequestMapping("/api/v1/users")
@Api(tags = "用户管理")
@Validated
@Slf4j
public class UserController {
    
    @Autowired
    private UserService userService;
    
    @GetMapping
    @ApiOperation("获取用户列表")
    public Result<PageResult<UserVO>> getUserList(
            @Valid UserQueryDTO query,
            @ApiParam("页码") @RequestParam(defaultValue = "1") Long current,
            @ApiParam("每页大小") @RequestParam(defaultValue = "10") Long size) {
        
        IPage<UserVO> page = userService.getUserPage(query, current, size);
        return Result.success(PageResult.of(page));
    }
    
    @GetMapping("/{id}")
    @ApiOperation("根据ID获取用户")
    public Result<UserVO> getUserById(
            @ApiParam("用户ID") @PathVariable Long id) {
        UserVO user = userService.getUserById(id);
        return Result.success(user);
    }
    
    @PostMapping
    @ApiOperation("创建用户")
    public Result<Void> createUser(@Valid @RequestBody UserCreateDTO dto) {
        userService.createUser(dto);
        return Result.success();
    }
    
    @PutMapping("/{id}")
    @ApiOperation("更新用户")
    public Result<Void> updateUser(
            @ApiParam("用户ID") @PathVariable Long id,
            @Valid @RequestBody UserUpdateDTO dto) {
        dto.setId(id);
        userService.updateUser(dto);
        return Result.success();
    }
    
    @DeleteMapping("/{id}")
    @ApiOperation("删除用户")
    public Result<Void> deleteUser(@ApiParam("用户ID") @PathVariable Long id) {
        userService.deleteUser(id);
        return Result.success();
    }
}
```

### 2. 参数校验
```java
@Data
@ApiModel("用户创建DTO")
public class UserCreateDTO implements Serializable {
    
    @ApiModelProperty("用户名")
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度必须在4-20之间")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    private String username;
    
    @ApiModelProperty("密码")
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度必须在6-20之间")
    private String password;
    
    @ApiModelProperty("邮箱")
    @Email(message = "邮箱格式不正确")
    private String email;
    
    @ApiModelProperty("手机号")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
    
    @ApiModelProperty("部门ID")
    @NotNull(message = "部门ID不能为空")
    private Long deptId;
}
```

## DTO与VO设计规范

### 1. DTO（数据传输对象）
用于接收前端请求参数：

```java
@Data
@ApiModel("用户查询DTO")
public class UserQueryDTO implements Serializable {
    
    @ApiModelProperty("用户名")
    private String username;
    
    @ApiModelProperty("部门ID")
    private Long deptId;
    
    @ApiModelProperty("状态")
    private UserStatus status;
    
    @ApiModelProperty("创建时间开始")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createTimeStart;
    
    @ApiModelProperty("创建时间结束")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createTimeEnd;
}
```

### 2. VO（视图对象）
用于返回给前端的数据：

```java
@Data
@ApiModel("用户视图对象")
public class UserVO implements Serializable {
    
    @ApiModelProperty("用户ID")
    private Long id;
    
    @ApiModelProperty("用户名")
    private String username;
    
    @ApiModelProperty("真实姓名")
    private String realName;
    
    @ApiModelProperty("邮箱")
    private String email;
    
    @ApiModelProperty("手机号")
    private String phone;
    
    @ApiModelProperty("状态")
    private UserStatus status;
    
    @ApiModelProperty("部门名称")
    private String deptName;
    
    @ApiModelProperty("角色列表")
    private List<RoleVO> roles;
    
    @ApiModelProperty("创建时间")
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    private LocalDateTime createTime;
}
```

## 异常处理

### 1. 全局异常处理器
```java
@RestControllerAdvice
@Slf4j
public class GlobalExceptionHandler {
    
    /**
     * 业务异常
     */
    @ExceptionHandler(BusinessException.class)
    public Result<Void> handleBusinessException(BusinessException e) {
        log.warn("业务异常: {}", e.getMessage());
        return Result.error(e.getResultCode());
    }
    
    /**
     * 参数校验异常
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public Result<Void> handleValidationException(MethodArgumentNotValidException e) {
        String message = e.getBindingResult().getFieldErrors().stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.joining(", "));
        log.warn("参数校验失败: {}", message);
        return Result.error(ResultCode.PARAM_ERROR.getCode(), message);
    }
    
    /**
     * 系统异常
     */
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常", e);
        return Result.error(ResultCode.INTERNAL_SERVER_ERROR);
    }
}
```

### 2. 业务异常定义
```java
public class BusinessException extends RuntimeException {
    
    private final IResult resultCode;
    
    public BusinessException(IResult resultCode) {
        super(resultCode.getMessage());
        this.resultCode = resultCode;
    }
    
    public BusinessException(IResult resultCode, String message) {
        super(message);
        this.resultCode = resultCode;
    }
}
```

## API文档规范

### 1. Swagger注解使用
```java
@Api(tags = "用户管理", description = "用户相关的增删改查操作")
@ApiOperation(value = "创建用户", notes = "创建新的系统用户")
@ApiParam(name = "dto", value = "用户创建参数", required = true)
@ApiModel(value = "用户创建DTO", description = "创建用户时的请求参数")
@ApiModelProperty(value = "用户名", example = "admin", required = true)
```

### 2. 接口文档配置
```java
@Configuration
@EnableOpenApi
public class SwaggerConfig {
    
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("IAM平台API文档")
                        .version("1.0.0")
                        .description("企业级统一身份与权限管理平台API接口文档"))
                .addSecurityItem(new SecurityRequirement().addList("Authorization"))
                .components(new Components()
                        .addSecuritySchemes("Authorization",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("bearer")
                                        .bearerFormat("JWT")));
    }
}
```

## 接口安全

### 1. 认证鉴权
```java
@PreAuthorize("hasAuthority('user:create')")
@PostMapping
public Result<Void> createUser(@Valid @RequestBody UserCreateDTO dto) {
    userService.createUser(dto);
    return Result.success();
}
```

### 2. 数据脱敏
```java
@JsonSerialize(using = SensitiveDataSerializer.class)
@SensitiveData(type = SensitiveType.MOBILE_PHONE)
private String phone;
```